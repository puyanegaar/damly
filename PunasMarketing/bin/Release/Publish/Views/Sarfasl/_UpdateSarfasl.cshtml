@model PunasMarketing.ViewModels.Sarfasl.SarfaslViewModel

<div class="modal-header bg-youtube">
    <button type="button" class="close" data-dismiss="modal">
        <span aria-hidden="true" style="color: white">×</span>
        <span class="sr-only">Close</span>
    </button>
    <h4 class="modal-title">ویرایش سرفصل</h4>
</div>

@using (Html.BeginForm("UpdateSarfaslModal", "Sarfasl", FormMethod.Post, new { style = "padding: 10px" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Sarfasl.Id)
    @Html.HiddenFor(model => model.Sarfasl.IsConstant)
    @Html.HiddenFor(model => model.Sarfasl.StrCode, new { id = "oldCode" })

    <div class="col-xs-12 col-md-12">
        <div class="col-xs-6 col-md-6">
            سطح:
            <label class="custom-control custom-control-primary custom-radio">
                <input id="rbnKol" class="custom-control-input" type="radio" name="sarfaslLevel" value="kol" @(!Model.Sarfasl.IsMoeen ? "checked='checked'" : "")>
                <span class="custom-control-indicator"></span>
                <span class="custom-control-label">کل</span>
            </label>
            <label class="custom-control custom-control-primary custom-radio">
                <input id="rbnMoeen" class="custom-control-input" type="radio" name="sarfaslLevel" value="moeen" @(Model.Sarfasl.IsMoeen ? "checked='checked'" : "")>
                <span class="custom-control-indicator"></span>
                <span class="custom-control-label">معین</span>
            </label>
        </div>

        <div class="col-xs-6 col-md-6">
            <span id="kolCodeWarning" class="text-warning">کد حساب کل را یک رقمی وارد کنید.</span>
            <span id="moeenCodeWarning" class="text-warning">کد حساب معین را دو رقمی وارد کنید.</span>
        </div>

        <div class="col-xs-6 col-md-6">
            <div class="md-form-group md-label-static">
                @Html.DropDownListFor(model => model.GroupSarfaslId, new SelectList(Model.AllSarfasls.Where(i => i.ParentId == null), "Id", "CodingAndName"), "-", new { @class = "md-form-control", id = "drpGroupSarfasls" })
                @Html.LabelFor(model => model.GroupSarfaslId, new { @class = "md-control-label" })
                <span class="has-error md-help-block valError">@Html.ValidationMessageFor(model => model.GroupSarfaslId)</span>
            </div>
        </div>

        <div id="kolDiv">
            <div class="col-xs-6 col-md-6">
                <div class="md-form-group md-label-static">
                    @Html.DropDownListFor(model => model.KolSarfaslId, Enumerable.Empty<SelectListItem>(), "-", new { @class = "md-form-control", id = "drpKolSarfasls" })
                    @Html.LabelFor(model => model.KolSarfaslId, new { @class = "md-control-label" })
                    <span id="kolErrorMessage" class="has-error md-help-block valError" style="visibility: visible">حساب کل را انتخاب کنید</span>
                </div>
            </div>
        </div>

        <div class="col-xs-6 col-md-6">
            <div class="md-form-group md-label-static">
                @Html.TextBoxFor(model => model.Sarfasl.StrCode, new { @class = "md-form-control", type = "text", spellcheck = "false", required = "", id = "txtCode", maxlength = "1", data_val_number = "فقط مقدار عددی وارد کنید" })
                @Html.LabelFor(model => model.Sarfasl.Code, new { @class = "md-control-label" })
                <span class="has-error md-help-block valError">@Html.ValidationMessageFor(model => model.Sarfasl.Code)</span>
                <span class="has-error md-help-block valError" id="lblCodeDigitCountError">کد حساب معین را دو رقمی وارد کنید</span>
                <span class="has-error md-help-block valError" id="lblCodeExistsError">کد حساب تکراری است</span>
            </div>
        </div>

        <div class="col-xs-6 col-md-6">
            <div class="md-form-group md-label-static">
                @Html.TextBoxFor(model => model.Sarfasl.Coding, new { @class = "md-form-control", type = "text", spellcheck = "false", required = "", @readonly = "readonly", id = "txtCoding" })
                @Html.LabelFor(model => model.Sarfasl.Coding, new { @class = "md-control-label" })
            </div>
        </div>

        <div class="col-xs-12 col-md-12">
            <div class="md-form-group md-label-static">
                @Html.TextBoxFor(model => model.Sarfasl.Name, new { @class = "md-form-control", type = "text", spellcheck = "false", required = "" })
                @Html.LabelFor(model => model.Sarfasl.Name, new { @class = "md-control-label" })
                <span class="has-error md-help-block valError">@Html.ValidationMessageFor(model => model.Sarfasl.Name)</span>
            </div>
        </div>
    </div>

    <div style="margin: 25px">
        <input id="btnSubmit" class="btn btn-success" type="submit" value="تأیید" />
        <input class="btn btn-danger" type="button" value="لغو" data-dismiss="modal" />
    </div>
}

@Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        var txtCode = $('#txtCode');
        var txtCoding = $('#txtCoding');
        var moeenCodeWarning = $('#moeenCodeWarning');
        var kolCodeWarning = $('#kolCodeWarning');
        var kolDiv = $('#kolDiv');
        var drpKolSarfasls = $('#drpKolSarfasls');
        var drpGroupSarfasls = $('#drpGroupSarfasls');
        var lblCodeDigitCountError = $('#lblCodeDigitCountError');
        var lblCodeExistsError = $('#lblCodeExistsError');
        var kolErrorMessage = $('#kolErrorMessage');

        lblCodeDigitCountError.hide();
        lblCodeExistsError.hide();

        fillDrpKolSarfasls();


        @if (Model.Sarfasl.IsMoeen)
        {
            <text>
                kolCodeWarning.hide();
                moeenCodeWarning.show();
                kolDiv.find('*').css("visibility", "visible");

                txtCode.attr("maxLength", 2);

                kolErrorMessage.css("visibility", "hidden");
            </text>
        }
        else
        {
            <text>
                moeenCodeWarning.hide();
                $('#kolDiv').find('*').css("visibility", "hidden");
            </text>
        }

        $('input[type=radio][name=sarfaslLevel]').change(function () {
            txtCode.val("");
            lblCodeDigitCountError.hide();

            if (this.value === 'kol') {
                kolCodeWarning.show();
                moeenCodeWarning.hide();
                kolDiv.find('*').css("visibility", "hidden");

                txtCode.attr("maxLength", 1);
            }
            else if (this.value === 'moeen') {
                kolCodeWarning.hide();
                moeenCodeWarning.show();
                kolDiv.find('*').css("visibility", "visible");

                txtCode.attr("maxLength", 2);
            }
        });

        $(document).on("change",
            "#drpGroupSarfasls",
            function () {
                if (drpGroupSarfasls.prop('selectedIndex') === 0) {
                    txtCode.val("");
                }
                else {
                    var newSarfaslCode = getNewSarfaslCode(drpGroupSarfasls.find(":selected").val());
                    txtCode.val(newSarfaslCode);
                }

                fillDrpKolSarfasls();
            });

        $(document).on('change',
            '#drpKolSarfasls',
            function () {
                if (drpKolSarfasls.prop('selectedIndex') === 0) {
                    kolErrorMessage.css("visibility", "visible");
                    txtCode.val("");
                }
                else {
                    kolErrorMessage.css("visibility", "hidden");

                    var newSarfaslCode = getNewSarfaslCode(drpKolSarfasls.find(":selected").val());
                    var formattedNumber = ("0" + newSarfaslCode).slice(-2);
                    txtCode.val(formattedNumber);
                }

                setCoding();
            });

        txtCode.on('change keydown paste input', function () {
            lblCodeDigitCountError.hide();
            setCoding();
        });

        function setCoding() {
            var txtCodeVal = txtCode.val().trim();
            if ($.isNumeric(txtCodeVal)) {
                var coding;

                if ($('#rbnMoeen').is(':checked')) {
                    if (txtCodeVal.length === 1 && drpKolSarfasls.prop('selectedIndex') !== 0) {
                        txtCodeVal = "0" + txtCodeVal;
                    }
                    coding = getCoding($('#drpKolSarfasls option:selected').text());
                }
                else {
                    coding = getCoding($('#drpGroupSarfasls option:selected').text());
                }
                txtCoding.val(coding.trim() + txtCodeVal);

            } else {
                txtCoding.val("");
            }
        }

        $('#btnSubmit').click(function () {
            if ($('#rbnMoeen').is(':checked')) {
                var txtCodeValLength = txtCode.val().length;

                if (drpKolSarfasls.prop('selectedIndex') === 0) {
                    kolErrorMessage.css("visibility", "visible");
                    return false;
                }

                if (txtCode.val().trim() !== "" && $.isNumeric(txtCode.val()) && txtCodeValLength < 2) {
                    lblCodeExistsError.hide();
                    lblCodeDigitCountError.show();
                    return false;
                }
                else {
                    lblCodeDigitCountError.hide();
                }
            }

            var parentId;
            if ($('#rbnMoeen').is(':checked')) {
                parentId = $('#drpKolSarfasls option:selected').val();
            } else {
                parentId = $('#drpGroupSarfasls option:selected').val();
            }

            var newCode = $('#txtCode').val();
            var oldCode = $('#oldCode').val();

            if (newCode != oldCode && codeExists(parentId, newCode)) {
                lblCodeDigitCountError.hide();
                lblCodeExistsError.show();

                return false;
            } else {
                lblCodeExistsError.hide();
            }

            kolErrorMessage.css("visibility", "hidden");
            return true;
        });

        function fillDrpKolSarfasls() {
            $.ajax({
                url: "/Sarfasl/GetKolSarfasls",
                data: { id: drpGroupSarfasls.find(":selected").val(), sarfaslId: @(Model.Sarfasl.Id) },
                type: "Post",
                dataType: "Json",
                success: function (result) {
                    drpKolSarfasls.html(result.Html);
                    setCoding();
                },
                error: function () {
                    alert("خطا در دریافت اطلاعات حساب های کل!");
                }
            });
        }
    });

    var sarfasls = @Html.Raw(Json.Encode(ViewBag.Sarfasls));

    function getNewSarfaslCode(parentId) {
        var sarfaslsByParentId = [];
        for (var i = 0; i < sarfasls.length; i++) {
            if (sarfasls[i].ParentId == parentId) {
                sarfaslsByParentId.push(sarfasls[i]);
            }
        }

        var lastCode = 0;
        if (sarfaslsByParentId.length > 0) {
            lastCode = Math.max.apply(Math, sarfaslsByParentId.map(function(o) { return o.Code }));
        }
        return lastCode + 1;
    }

    function codeExists(parentId, code) {
        var exists = false;
        for (var i = 0; i < sarfasls.length; i++) {
            if (sarfasls[i].ParentId == parentId && sarfasls[i].Code == code) {
                exists = true;
                break;
            }
        }
        return exists;
    }

    function getCoding(codingAndName) {
        var splitted = codingAndName.split('-');
        return splitted[0];
    }
</script>

